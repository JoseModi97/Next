/* tslint:disable */
/* eslint-disable */
/**
 * shopping-cart Api Documentation
 * shopping-cart Api Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@shopping_cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddUsers,
  EditUsers,
  ListUsers,
  ViewUsers,
} from '../models/index';
import {
    AddUsersFromJSON,
    AddUsersToJSON,
    EditUsersFromJSON,
    EditUsersToJSON,
    ListUsersFromJSON,
    ListUsersToJSON,
    ViewUsersFromJSON,
    ViewUsersToJSON,
} from '../models/index';

export interface AddUsersRequest {
    addUsers: AddUsers;
}

export interface DeleteUsersRequest {
    id: string;
}

export interface EditUsersRequest {
    id: string;
    editUsers: EditUsers;
}

export interface ListUsersRequest {
    search?: string;
    limit?: number;
    page?: number;
}

export interface ViewUsersRequest {
    id: string;
}

/**
 *
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     * Add New User
     * Add Users
     */
    async addUsersRaw(requestParameters: AddUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ViewUsers>> {
        if (requestParameters['addUsers'] == null) {
            throw new runtime.RequiredError(
                'addUsers',
                'Required parameter "addUsers" was null or undefined when calling addUsers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/users/add`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddUsersToJSON(requestParameters['addUsers']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ViewUsersFromJSON(jsonValue));
    }

    /**
     * Add New User
     * Add Users
     */
    async addUsers(requestParameters: AddUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ViewUsers> {
        const response = await this.addUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Users
     * Delete Users
     */
    async deleteUsersRaw(requestParameters: DeleteUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Error>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteUsers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/users/delete/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<Error>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Users
     * Delete Users
     */
    async deleteUsers(requestParameters: DeleteUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Error> {
        const response = await this.deleteUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit User
     * Edit Users
     */
    async editUsersRaw(requestParameters: EditUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EditUsers>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling editUsers().'
            );
        }

        if (requestParameters['editUsers'] == null) {
            throw new runtime.RequiredError(
                'editUsers',
                'Required parameter "editUsers" was null or undefined when calling editUsers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/users/edit/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EditUsersToJSON(requestParameters['editUsers']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EditUsersFromJSON(jsonValue));
    }

    /**
     * Edit User
     * Edit Users
     */
    async editUsers(requestParameters: EditUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EditUsers> {
        const response = await this.editUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Users
     * List Users
     */
    async listUsersRaw(requestParameters: ListUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListUsers>> {
        const queryParameters: any = {};

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/users`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListUsersFromJSON(jsonValue));
    }

    /**
     * Users
     * List Users
     */
    async listUsers(requestParameters: ListUsersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListUsers> {
        const response = await this.listUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User Details
     * View Users
     */
    async viewUsersRaw(requestParameters: ViewUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ViewUsers>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling viewUsers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/users/view/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ViewUsersFromJSON(jsonValue));
    }

    /**
     * User Details
     * View Users
     */
    async viewUsers(requestParameters: ViewUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ViewUsers> {
        const response = await this.viewUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
