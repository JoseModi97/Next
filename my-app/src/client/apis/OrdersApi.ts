/* tslint:disable */
/* eslint-disable */
/**
 * shopping-cart Api Documentation
 * shopping-cart Api Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@shopping_cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddOrders,
  EditOrders,
  ListOrders,
  ViewOrders,
} from '../models/index';
import {
    AddOrdersFromJSON,
    AddOrdersToJSON,
    EditOrdersFromJSON,
    EditOrdersToJSON,
    ListOrdersFromJSON,
    ListOrdersToJSON,
    ViewOrdersFromJSON,
    ViewOrdersToJSON,
} from '../models/index';

export interface AddOrdersRequest {
    addOrders: AddOrders;
}

export interface DeleteOrdersRequest {
    id: string;
}

export interface EditOrdersRequest {
    id: string;
    editOrders: EditOrders;
}

export interface ListOrdersRequest {
    search?: string;
    limit?: number;
    page?: number;
}

export interface ViewOrdersRequest {
    id: string;
}

/**
 *
 */
export class OrdersApi extends runtime.BaseAPI {

    /**
     * Add New Order
     * Add Orders
     */
    async addOrdersRaw(requestParameters: AddOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ViewOrders>> {
        if (requestParameters['addOrders'] == null) {
            throw new runtime.RequiredError(
                'addOrders',
                'Required parameter "addOrders" was null or undefined when calling addOrders().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/orders/add`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddOrdersToJSON(requestParameters['addOrders']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ViewOrdersFromJSON(jsonValue));
    }

    /**
     * Add New Order
     * Add Orders
     */
    async addOrders(requestParameters: AddOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ViewOrders> {
        const response = await this.addOrdersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Orders
     * Delete Orders
     */
    async deleteOrdersRaw(requestParameters: DeleteOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Error>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteOrders().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/orders/delete/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<Error>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Orders
     * Delete Orders
     */
    async deleteOrders(requestParameters: DeleteOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Error> {
        const response = await this.deleteOrdersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit Order
     * Edit Orders
     */
    async editOrdersRaw(requestParameters: EditOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EditOrders>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling editOrders().'
            );
        }

        if (requestParameters['editOrders'] == null) {
            throw new runtime.RequiredError(
                'editOrders',
                'Required parameter "editOrders" was null or undefined when calling editOrders().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/orders/edit/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EditOrdersToJSON(requestParameters['editOrders']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EditOrdersFromJSON(jsonValue));
    }

    /**
     * Edit Order
     * Edit Orders
     */
    async editOrders(requestParameters: EditOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EditOrders> {
        const response = await this.editOrdersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Orders
     * List Orders
     */
    async listOrdersRaw(requestParameters: ListOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOrders>> {
        const queryParameters: any = {};

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/orders`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOrdersFromJSON(jsonValue));
    }

    /**
     * Orders
     * List Orders
     */
    async listOrders(requestParameters: ListOrdersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOrders> {
        const response = await this.listOrdersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Order Details
     * View Orders
     */
    async viewOrdersRaw(requestParameters: ViewOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ViewOrders>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling viewOrders().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/orders/view/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ViewOrdersFromJSON(jsonValue));
    }

    /**
     * Order Details
     * View Orders
     */
    async viewOrders(requestParameters: ViewOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ViewOrders> {
        const response = await this.viewOrdersRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
