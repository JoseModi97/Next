/* tslint:disable */
/* eslint-disable */
/**
 * shopping-cart Api Documentation
 * shopping-cart Api Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@shopping_cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddProducts,
  EditProducts,
  ListProducts,
  ViewProducts,
} from '../models/index';
import {
    AddProductsFromJSON,
    AddProductsToJSON,
    EditProductsFromJSON,
    EditProductsToJSON,
    ListProductsFromJSON,
    ListProductsToJSON,
    ViewProductsFromJSON,
    ViewProductsToJSON,
} from '../models/index';

export interface AddProductsRequest {
    addProducts: AddProducts;
}

export interface DeleteProductsRequest {
    id: string;
}

export interface EditProductsRequest {
    id: string;
    editProducts: EditProducts;
}

export interface ListProductsRequest {
    search?: string;
    limit?: number;
    page?: number;
}

export interface ViewProductsRequest {
    id: string;
}

/**
 *
 */
export class ProductsApi extends runtime.BaseAPI {

    /**
     * Add New Product
     * Add Products
     */
    async addProductsRaw(requestParameters: AddProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ViewProducts>> {
        if (requestParameters['addProducts'] == null) {
            throw new runtime.RequiredError(
                'addProducts',
                'Required parameter "addProducts" was null or undefined when calling addProducts().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/products/add`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddProductsToJSON(requestParameters['addProducts']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ViewProductsFromJSON(jsonValue));
    }

    /**
     * Add New Product
     * Add Products
     */
    async addProducts(requestParameters: AddProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ViewProducts> {
        const response = await this.addProductsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Products
     * Delete Products
     */
    async deleteProductsRaw(requestParameters: DeleteProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Error>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteProducts().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/products/delete/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<Error>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Products
     * Delete Products
     */
    async deleteProducts(requestParameters: DeleteProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Error> {
        const response = await this.deleteProductsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit Product
     * Edit Products
     */
    async editProductsRaw(requestParameters: EditProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EditProducts>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling editProducts().'
            );
        }

        if (requestParameters['editProducts'] == null) {
            throw new runtime.RequiredError(
                'editProducts',
                'Required parameter "editProducts" was null or undefined when calling editProducts().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/products/edit/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EditProductsToJSON(requestParameters['editProducts']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EditProductsFromJSON(jsonValue));
    }

    /**
     * Edit Product
     * Edit Products
     */
    async editProducts(requestParameters: EditProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EditProducts> {
        const response = await this.editProductsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Products
     * List Products
     */
    async listProductsRaw(requestParameters: ListProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListProducts>> {
        const queryParameters: any = {};

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/products`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListProductsFromJSON(jsonValue));
    }

    /**
     * Products
     * List Products
     */
    async listProducts(requestParameters: ListProductsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListProducts> {
        const response = await this.listProductsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Product Details
     * View Products
     */
    async viewProductsRaw(requestParameters: ViewProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ViewProducts>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling viewProducts().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/products/view/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ViewProductsFromJSON(jsonValue));
    }

    /**
     * Product Details
     * View Products
     */
    async viewProducts(requestParameters: ViewProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ViewProducts> {
        const response = await this.viewProductsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
