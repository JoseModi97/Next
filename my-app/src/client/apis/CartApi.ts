/* tslint:disable */
/* eslint-disable */
/**
 * shopping-cart Api Documentation
 * shopping-cart Api Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@shopping_cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddCart,
  EditCart,
  ListCart,
  ViewCart,
} from '../models/index';
import {
    AddCartFromJSON,
    AddCartToJSON,
    EditCartFromJSON,
    EditCartToJSON,
    ListCartFromJSON,
    ListCartToJSON,
    ViewCartFromJSON,
    ViewCartToJSON,
} from '../models/index';

export interface AddCartRequest {
    addCart: AddCart;
}

export interface DeleteCartRequest {
    id: string;
}

export interface EditCartRequest {
    id: string;
    editCart: EditCart;
}

export interface ListCartRequest {
    search?: string;
    limit?: number;
    page?: number;
}

export interface ViewCartRequest {
    id: string;
}

/**
 *
 */
export class CartApi extends runtime.BaseAPI {

    /**
     * Add New Cart
     * Add Cart
     */
    async addCartRaw(requestParameters: AddCartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ViewCart>> {
        if (requestParameters['addCart'] == null) {
            throw new runtime.RequiredError(
                'addCart',
                'Required parameter "addCart" was null or undefined when calling addCart().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/cart/add`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddCartToJSON(requestParameters['addCart']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ViewCartFromJSON(jsonValue));
    }

    /**
     * Add New Cart
     * Add Cart
     */
    async addCart(requestParameters: AddCartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ViewCart> {
        const response = await this.addCartRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Cart
     * Delete Cart
     */
    async deleteCartRaw(requestParameters: DeleteCartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Error>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteCart().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/cart/delete/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<Error>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Cart
     * Delete Cart
     */
    async deleteCart(requestParameters: DeleteCartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Error> {
        const response = await this.deleteCartRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit Cart
     * Edit Cart
     */
    async editCartRaw(requestParameters: EditCartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EditCart>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling editCart().'
            );
        }

        if (requestParameters['editCart'] == null) {
            throw new runtime.RequiredError(
                'editCart',
                'Required parameter "editCart" was null or undefined when calling editCart().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/cart/edit/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EditCartToJSON(requestParameters['editCart']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EditCartFromJSON(jsonValue));
    }

    /**
     * Edit Cart
     * Edit Cart
     */
    async editCart(requestParameters: EditCartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EditCart> {
        const response = await this.editCartRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Cart
     * List Cart
     */
    async listCartRaw(requestParameters: ListCartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListCart>> {
        const queryParameters: any = {};

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/cart`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListCartFromJSON(jsonValue));
    }

    /**
     * Cart
     * List Cart
     */
    async listCart(requestParameters: ListCartRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListCart> {
        const response = await this.listCartRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Cart Details
     * View Cart
     */
    async viewCartRaw(requestParameters: ViewCartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ViewCart>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling viewCart().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/cart/view/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ViewCartFromJSON(jsonValue));
    }

    /**
     * Cart Details
     * View Cart
     */
    async viewCart(requestParameters: ViewCartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ViewCart> {
        const response = await this.viewCartRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
